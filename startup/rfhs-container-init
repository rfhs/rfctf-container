#!/bin/sh
set -eu
DEBUG="${DEBUG:-}"
PHY_ERR=""

if [ -n "${DEBUG}" ]; then
	set -x
fi

. "$(dirname "${0}")"/rfhs-helpers.sh

f_exit() {
  exit 1
}

trap f_exit INT

create_ns_link() {
  # Set the name for the namespace
  PID="$(docker inspect -f '{{.State.Pid}}' "${CONTAINER_NAME}")"
  if [ -z "${PID}" ]; then
    printf "Unable to identify process id for %s, skipping.\n" "${CONTAINER_NAME}"
    exit 1
  fi
  mkdir -p /run/netns/
  if mountpoint -q -- "/run/netns/${CONTAINER_NAME}"; then
    # Remove the stale namespace mounting
	  printf "Stale namespace found at /run/netns/%s\n" "${CONTAINER_NAME}"
  	printf "Removing stale namespace\n"
  	ip netns delete "${CONTAINER_NAME}"
  fi
  touch "/run/netns/${CONTAINER_NAME}"
  printf "Mapping namespaces of process id %s for %s to namespace name %s\n" "${PID}" "${CONTAINER_NAME}" "${CONTAINER_NAME}"
  mount -o bind "/proc/${PID}/ns/net" "/run/netns/${CONTAINER_NAME}"
}

# shellcheck disable=SC2153
for CONTAINER_NETWORK in ${CONTAINER_NETWORKS}; do
  if [ -z "$(docker network ls  --filter name="${CONTAINER_NETWORK}" --format '{{ .ID }}')" ]; then
    if [ "${CONTAINER_NETWORK}" = "contestant" ]; then
      docker network create --driver=bridge --subnet 192.168.232.0/27 "${CONTAINER_NETWORK}"
    else
      docker network create --internal "${CONTAINER_NETWORK}"
    fi
  fi
done

if [ -n "$(docker ps --filter name="${CONTAINER_NAME}" --format '{{ .ID }}' )" ]; then
	echo "Found existing ${CONTAINER_NAME} container... QUITTING"
	exit 1
fi

if [ -n "${CONTAINER_PHYS}" ]; then
  for phy_num in ${CONTAINER_PHYS}; do
    if [ ! -L "/sys/class/ieee80211/phy${phy_num}" ]; then
      echo "WARNING: phy${phy_num} is not found in /sys/class/ieee80211"
      PHY_ERR="true"
    fi

    if [ ! -d "/sys/class/ieee80211/phy${phy_num}/device/net" ]; then
      echo "WARNING: phy${phy_num} is not mapped to a WLAN interface"
      PHY_ERR="true"
    fi
  done
fi

if [ -n "${PHY_ERR}" ]; then
	echo "Fixing phy interfaces with ./fix_phy.sh"
	FIX_PHY=1 "$(dirname "${0}")"/fixphy.sh
fi

# Create/fix log directory
LOG_DIR="/var/log/rfhs-rfctf/${CONTAINER_NAME}"
[ ! -d "${LOG_DIR}" ] && mkdir -p "${LOG_DIR}"
# docker user namespace maps 0 to 231072
if [ "$(stat -c "%u" "${LOG_DIR}")" != "231072" ] || [ "$(stat -c "%g" "${LOG_DIR}")" != "231072" ]; then
  chown 231072:231072 "${LOG_DIR}"
fi

# Create/fix shared_persistent_storage directory
sps='/var/cache/rfhs-rfctf/shared_persistent_storage'
[ ! -d "${sps}" ] && mkdir -p "${sps}"
# docker user namespace maps 0 to 231072
if [ "$(stat -c "%u" "${sps}")" != "231072" ] || [ "$(stat -c "%g" "${sps}")" != "231072" ]; then
  chown 231072:231072 "${sps}"
fi

if [ "${CONTAINER_NETWORKS}" = "contestant" ]; then
  # The key file needs to be owned by the docker root user
  SSH_KEY_FILE='/var/cache/rfhs-rfctf/key/authorized_keys'
  if [ -f "${SSH_KEY_FILE}" ]; then
    # docker user namespace maps 0 to 231072
    if [ "$(stat -c "%u" "${SSH_KEY_FILE}")" != "231072" ] || [ "$(stat -c "%g" "${SSH_KEY_FILE}")" != "231072" ]; then
      chown 231072:231072 "${SSH_KEY_FILE}"
    fi
  fi
  # shellcheck disable=SC2046
  docker run -p "${SSH_PORT}":22 -p "${VNC_PORT}":8080 --rm -d --net=contestant --name "${CONTAINER_NAME}" \
    --tmpfs /run:mode=0755,nosuid,nodev,nr_inodes=800k,size=20%,strictatime \
    --cap-add net_raw --cap-add net_admin --cap-add=dac_read_search \
    --security-opt seccomp=unconfined \
    $([ -f "${SSH_KEY_FILE}" ] && printf -- "-v ${SSH_KEY_FILE}:/root/.ssh/authorized_keys\n") \
    -v "${sps}":/root/shared_persistent_storage -v "${LOG_DIR}":/var/log \
    "${CONTAINER_IMAGE}"
else
  if [ "${CONTAINER_NAME}" = "openwrt" ]; then
    # shellcheck disable=SC2046
    docker create --rm --network openwrt-eth0 --name "${CONTAINER_NAME}" \
      --tmpfs /run:mode=0755,nosuid,nodev,nr_inodes=800k,size=20%,strictatime \
      -v "${sps}":/root/shared_persistent_storage -v "${LOG_DIR}":/var/log \
      $(if [ -d '/root/wctf-restricted/wifi/openwrt/airkraken/files' ]; then find '/root/wctf-restricted/wifi/openwrt/airkraken/files' -type f ! -path '*shared_persistent_storage*' -exec printf "-v %s:%s\n" "{}" "{}" \; | sed 's#:/root/wctf-restricted/wifi/openwrt/airkraken/files#:#;s#$#:ro#'; fi) \
      $(if [ -d '/root/wctf-restricted/wifi/openwrt/aircracken/files' ]; then find '/root/wctf-restricted/wifi/openwrt/airkraken/files' -type l -exec printf "-v %s:%s\n" "{}" "{}" \; | sed 's#:/root/wctf-restricted/wifi/openwrt/airkraken/files#:#;s#$#:ro#'; fi) \
      --privileged --userns host \
      "${CONTAINER_IMAGE}"
      #--cap-add net_raw --cap-add net_admin \
      # XXX need to do bridge aging outside the container to not require privileged

    docker network connect openwrt-eth1 "${CONTAINER_NAME}"

    docker start "${CONTAINER_NAME}"
  else
    if [ "${CONTAINER_NAME}" = "rfctf-client" ]; then
      # XXX The ldm.conf line does not work
      # shellcheck disable=SC2046
      docker run -d --rm --network none --name "${CONTAINER_NAME}" \
        --tmpfs /run:mode=0755,nosuid,nodev,nr_inodes=800k,size=20%,strictatime \
        --privileged --userns host \
        $([ -d '/root/wctf-restricted/wifi/leeloodallasmultipass/config' ] && printf -- '-v /root/wctf-restricted/wifi/leeloodallasmultipass/config:/root/leeloodallasmultipass/config\n') \
        $([ -d '/root/wctf-restricted/wifi/leeloodallasmultipass/helpers' ] && printf -- '-v /root/wctf-restricted/wifi/leeloodallasmultipass/helpers:/root/leeloodallasmultipass/helpers\n') \
        $([ -d '/root/wctf-restricted/wifi/leeloodallasmultipass' ] && { { [ -f '/sys/devices/virtual/dmi/id/board_vendor' ] && [ "$(cat /sys/devices/virtual/dmi/id/board_vendor)" = 'Amazon EC2' ];} && printf -- '-v /root/wctf-restricted/wifi/leeloodallasmultipass/ldm-virtual.conf:/root/leeloodallasmultipass/ldm.conf\n' || printf -- '-v /root/wctf-restricted/wifi/leeloodallasmultipass/ldm.conf:/root/leeloodallasmultipass/ldm.conf\n';}) \
        -v "${sps}":/root/shared_persistent_storage -v "${LOG_DIR}":/var/log \
        "${CONTAINER_IMAGE}"
        #this still doesn't work, I think dhcpcd can't handle it
        #--cap-add net_raw --cap-add net_admin --cap-add=sys_admin --security-opt seccomp=unconfined \
    fi
    #challengectl isn't public yet so this won't work for you
    if [ "${CONTAINER_NAME}" = "rfctf-sdr" ]; then
      # shellcheck disable=SC2046
      docker run -d --rm --network none --name "${CONTAINER_NAME}" \
        --tmpfs /run:mode=0755,nosuid,nodev,nr_inodes=800k,size=20%,strictatime \
        --privileged --userns host \
        $([ -f '/root/wctf-restricted/sdr/challengectl_flags/current_conf.csv' ] && printf -- '-v /root/wctf-restricted/sdr/challengectl_flags/current_conf.csv:/root/challengectl/current_conf.csv\n') \
        $([ -d '/root/wctf-restricted/sdr/simple_sdr_challenge_runner/challenges/current_conf' ] && printf -- '-v /root/wctf-restricted/sdr/simple_sdr_challenge_runner/challenges/current_conf:/root/challengectl/challenges/current_conf\n') \
        -v /dev/bus/usb:/dev/bus/usb \
        -v "${sps}":/root/shared_persistent_storage -v "${LOG_DIR}":/var/log \
        "${CONTAINER_IMAGE}" ./challengectl.py -f current_conf.csv -d devices.txt.rfhs
    fi
  fi
fi

# Set the name for the namespace
create_ns_link

if [ -n "${CONTAINER_PHYS}" ]; then
  for phy_num in ${CONTAINER_PHYS}; do
    while true; do
      if iw phy "phy${phy_num}" info > /dev/null 2>&1; then
        if ! is_vm && [ ! -d '/root/wctf-restricted' ]; then
          unset driver
          driver="$(awk -F'=' '{print $2}' "/sys/class/ieee80211/phy${phy_num}/device/uevent")"
          if [ 'mac80211_hwsim' != "${driver}" ]; then
            printf "Requested phy is using %s driver instead of the expected mac80211_hwsim.  Failing safe.\n" "${driver}"
            exit 1
          fi
        fi
        printf "Found phy%s, moving it into %s\n" "${phy_num}" "${CONTAINER_NAME}"
        break
      fi
      printf "Unable to find phy%s, waiting...\n" "${phy_num}"
      sleep 1
    done
    iw phy "phy${phy_num}" set netns name "${CONTAINER_NAME}"
  done
fi

if [ "${CONTAINER_NAME}" = "openwrt" ]; then
  if [ -x /root/wctf-restricted/wifi/openwrt/airkraken/secret-sauce.sh ]; then
    printf "Sleeping before running the secret-sauce...\n"
    sleep 30
    /root/wctf-restricted/wifi/openwrt/airkraken/secret-sauce.sh
  fi
fi
